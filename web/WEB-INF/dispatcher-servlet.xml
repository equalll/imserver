<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/aop
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd 
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
		http://www.springframework.org/schema/context 
		http://www.springframework.org/schema/context/spring-context-3.0.xsd 
		http://www.springframework.org/schema/mvc 
		http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd 
		http://www.springframework.org/schema/tx 
		http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">


    <mvc:default-servlet-handler/>
    <!--Enables the Spring @Service or @Transaction programming model-->
    <mvc:annotation-driven/>


    <!--自动扫描装配-->
    <context:component-scan base-package="com.cniao5.*"/>

    <!--导入配置文件-->
    <context:property-placeholder location="classpath*:jdbc.properties"/>

    <!-- 配置多请求数据类型，如json xml -->
    <!--annotationMethodHandlerAdapter使处理请求的 Handler 能够真正的具有处理请求的能力而提供一些服务-->
    <bean id="annotationMethodHandlerAdapter"
          class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
        <property name="messageConverters">
            <list>
                <!--解析json请求数据，将json转换为java对象-->
                <bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"/>
                <!-- 解析xml请求数据，将xml转换为java对象 -->
                <bean class="org.springframework.http.converter.xml.MarshallingHttpMessageConverter">
                    <constructor-arg>
                        <bean class="org.springframework.oxm.xstream.XStreamMarshaller">
                            <property name="streamDriver">
                                <bean class="com.thoughtworks.xstream.io.xml.DomDriver"/>
                            </property>
                            <property name="autodetectAnnotations">
                                <value>true</value>
                            </property>
                            <!--可以与xml互换的对象，需要使用XStream的注解，注解的使用方法请参XStream官网-->
                            <!--
                            <property name="annotatedClasses">
                                <list>
                                        <value></value>
                                </list>
                            </property>
                            -->
                        </bean>
                    </constructor-arg>
                </bean>

                <!-- bean class="org.springframework.http.converter.FormHttpMessageConverter" /-->
                <bean class="org.springframework.http.converter.BufferedImageHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.ByteArrayHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.StringHttpMessageConverter"/>
                <bean class="org.springframework.http.converter.ResourceHttpMessageConverter"/>
            </list>
        </property>
    </bean>

    <bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <property name="defaultContentType" value="application/html"/>

        <!-- enable /userinfo/123?format=json support -->
        <property name="favorParameter" value="true"/>

        <!--
            map extension_name to mimeType, such as /user.json =>
            application/json
        -->
        <property name="favorPathExtension" value="true"/>
        <property name="mediaTypes">
            <map>
                <entry key="jsp" value="text/html"/>
                <entry key="html" value="text/html"/>
                <entry key="json" value="application/json"/>
                <entry key="xml" value="application/xml"/>
                <entry key="apk" value="application/vnd.android.package-archive"/>
            </map>
        </property>

        <property name="viewResolvers">
            <list>

                <!--  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                     <property name="prefix" value="/html/"/>
                     <property name="suffix" value=".html"/>
                 </bean> -->

                <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
                    <property name="viewClass"
                              value="org.springframework.web.servlet.view.JstlView"/>
                    <property name="prefix" value="/WEB-INF/views/"/>
                    <property name="suffix" value=".jsp"/>
                </bean>
            </list>
        </property>
        <property name="defaultViews">
            <list>
                <!-- output JSON data-->
                <bean
                        class="org.springframework.web.servlet.view.json.MappingJacksonJsonView"/>
                <!-- output xml data-->
                <bean id="marshallingView"
                      class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <property name="marshaller">
                        <bean id="xStreamMarshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
                            <property name="autodetectAnnotations" value="true"/>
                        </bean>
                    </property>
                    <property name="contentType" value="application/xml"/>
                </bean>
            </list>
        </property>
    </bean>

    <!--配置数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <property name="driverClass">
            <value>${jdbc.driverClassName}</value>
        </property>
        <property name="jdbcUrl">
            <value>${jdbc.url}</value>
        </property>
        <property name="user">
            <value>${jdbc.username}</value>
        </property>
        <property name="password">
            <value>${jdbc.password}</value>
        </property>

        <!--配置连接池-->
        <property name="minPoolSize">
            <value>1</value>
        </property>
        <property name="maxPoolSize">
            <value>20</value>
        </property>
        <property name="maxIdleTime">
            <value>1800</value>
        </property>
        <property name="acquireIncrement">
            <value>2</value>
        </property>
        <property name="maxStatements">
            <value>0</value>
        </property>
        <property name="initialPoolSize">
            <value>2</value>
        </property>
        <property name="idleConnectionTestPeriod">
            <value>1800</value>
        </property>
        <property name="acquireRetryAttempts">
            <value>30</value>
        </property>
        <property name="breakAfterAcquireFailure">
            <value>true</value>
        </property>
        <property name="testConnectionOnCheckout">
            <value>false</value>
        </property>

        <!--配置sessionFactory-->
    </bean>
    <bean id="sessionFactory" class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <prop key="hibernate.dialect">${hibernate.dialect}</prop>
                <prop key="hibernate.show_sql">${hibernate.show_sql}</prop>
                <prop key="hibernate.format_sql">${hibernate.format_sql}</prop>
                <prop key="hibernate.hbm2ddl.auto">${hibernate.hbm2ddl.auto}</prop>
            </props>
        </property>

        <property name="packagesToScan">
            <list>
                <value>com.cniao5.model</value>
            </list>
        </property>
    </bean>

    <!--注入dao层-->
    <bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>

    <!--配置事务管理器-->
    <bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
        <property name="sessionFactory" ref="sessionFactory"></property>
    </bean>
    <!--声明事务管理器为注解方式-->
    <tx:annotation-driven transaction-manager="txManager"/>

    <!-- spring声明式事务的配置，以下为spring的AOP事务管理的增强部分 -->
    <tx:advice id="txAdvice" transaction-manager="txManager">
        <tx:attributes>
            <!-- 需要由交给spring的aop来进行代理的方法的集合，如果应用有自己的方法需有由spring来进行事务控制必须添加方法 -->
            <!-- 读取数据方法，一般采用只读事务 -->
            <tx:method name="get*" isolation="DEFAULT" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="load*" isolation="DEFAULT" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="select*" isolation="DEFAULT" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="query*" isolation="DEFAULT" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="find*" isolation="DEFAULT" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="list*" isolation="DEFAULT" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="criteria*" isolation="DEFAULT" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="page*" isolation="DEFAULT" propagation="SUPPORTS" read-only="true"/>
            <tx:method name="*" isolation="DEFAULT" propagation="SUPPORTS" read-only="true"/>
            <!--其他方法，如save，update，insert等对数据库进行写入操作的方法，当产生Exception进行回滚 -->
            <tx:method name="init*" isolation="DEFAULT" read-only="false" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="insert*" isolation="DEFAULT" read-only="false" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="save*" isolation="DEFAULT" read-only="false" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="update*" isolation="DEFAULT" read-only="false" propagation="REQUIRED"
                       rollback-for="Exception"/>

            <tx:method name="add*" isolation="DEFAULT" read-only="false" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="create*" isolation="DEFAULT" read-only="false" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="merge*" isolation="DEFAULT" read-only="false" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="del*" isolation="DEFAULT" read-only="false" propagation="REQUIRED"
                       rollback-for="Exception"/>
            <tx:method name="remove*" isolation="DEFAULT" read-only="false" propagation="REQUIRED"
                       rollback-for="Exception"/>

        </tx:attributes>
    </tx:advice>
    <!--配置声明事务的切入点-->
    <aop:config>
        <aop:advisor id="txPointcut" advice-ref="txAdvice"
                     pointcut="execution(* com.cniao5.service..*Service*.*(..))"
                />
    </aop:config>
</beans>
